
		JAVA is one of the OOPL/OOPS


		OOPS
			1.inheritance
			2.polymorphisam
			3.encapsulation
			4.abstraction


	OOPL	JAVA,python,.net,c++......
		

			java 18    		1995   JDK
						jdk8 download
			1.8 
To check java version ....

java  -version


javac -version

				PlatformIndependent
				
				java  PlatformIndependent		oracle
				.net 	Platform dependent		microsoft 
				
				
				welcome to java  
				
				Welcome.java 			.CLASS
				class Welcome    USER UNDERSTANDABLE LANGUAGE   SOURCE -->BYTE CODE
				{
				public static void main(String args[])
				{
				
				System.out.println("welcome to java");
				}
				}					JVM --BINARY 0'S AND 1'S BYTE CODE 
				
				javac filename.java //compilation    COMPILER 
				
				java classname     EXECUTION  JVM
				
				
				
				53 keywords -2 unused keywords
				
				
				Garbage collection --> garbage collector 
				
				
					c,c++
				
				
				
variables :
==========
		
			local   inside method {}
					
			global	outside method with in the class --->instance and static
			



									JAVA
				JSE 				 JEE     		       			 JME 				
	COREJAVA,AWT,SWINGS,APPLETS		servlets,jsp,mvcejb,jsf...			android 		



1)DESKTOP APPS/STANDALONE APPS   jse   ANTIVIRUS,MEDIA PLAYERS,ECLIPSE,....

2)WEB APPLICATIONS		server urls  JEE

3)DISTRIBUTED APPLICATIONS   webservices 

4)MOBILE APPLICATIONS	android JME 		


		OOPS
			1.inheritance
			2.polymorphisam     performance 
			
			3.encapsulation
			4.abstraction       security 
	
				
				Object-->11 methods
				
				
				class A
				{
				//20 methods
				
				
				}
				
				
				
				class B extends A
				{
				//10  methods 
				
				B b =new B();
				b.30()
				}
				
multiple Inheritance:
======================
instance,static

abstract ,concrete 

		public abstract void m1();

Abstraction
			abstract class 
			
			interfaces 

class 				: its a collection of only concrete methods 
 
abstract class		:its a collection of abstract+concrete methods 

interface 			 :only abstract methods 


Multiple Inheritance :
======================

		MI not supported by java @ classes
		MI  supported by java @ interface


	interface A      interface B
	{			{
	
	void cal();   void cal();
	
	}			}


		class C implements A,B
		{
		p s sv main(String args[]){}
		C c =new C();
		c.cal();//ambiguity 
		//12 ,14
		}
			void cal(){
			
			
			}
	
	}	
		}

	polymorphisam,this,super,final,public,private,protected,default,constructor,encapsulation


method overloading:
===================
		method name is same signature is different 

								no of params
								order of params 
								type of params 
	
method overriding:
================= parent and child mandatory
		method name is same body/implementation is different 




	class Parent 
	{
	  properties()
	  {
	  sop("100 crores")
	  }
	  marraige()
	  {
	  sop("xyz")
	  }
	}

class Child extends Parent {
	@Override 
	  marraige()
	  {
	  sop("abc")
	  }
}


final 

		3 places 
		
		before variable,method,class




this 	used for represting current class properties(variable,method,obje,constructor)

super  used for represting parent class properties



public :anywhere (inside or outside package irrespective of parent child relations)
private :only inside the class
default :only inside the package 
protected inside package anywhere outside the package only when ever it is child


by default package for every java file java.lang
by default parent for every java class java.lang.Object



Exception handling:
==================



java.lang.invalidcredentials in demo.java system defined error messages 



File IO stream:
========= throws  IOException

	java.io
	
		java   --->create,write,read,delete


		File  java.io
		
		FileWriter  	write
		BufferedWriter	write  newLine()
		PrintWriter		print
		
		
		FileReader
		BufferedReader
		
		serialization & de-serialization
		
	String,		StringBuffer,StringBuilder	 java.lang
	immutable			muttable
	
			"sandeep"
	
	
	String name="onmobile";
	String name1=new String("onmobile");
	
	t1,t2,t3,t4
	
	public void m1()
	{
	
	
	
	}
	
	public synchronized void m1()
	{
	
	
	
	}
	
	
	
	Collections:
	=============	
	int array[]=new int[5];AIOE
				int marks=20;
				
				int marks[]={...................}	


		1)fixed in size
		2)only homogeneous data allowed
		3)no utility methods

	Collections

		1)not fixed in size growable in nature
		2)both homogeneous & Haterogeneous  data allowed
		3)lots of utility methods


List :

		duplicates are allowed
		insertion order is preserved 
		
		
Set	:
		duplicates are not allowed 
		insertion order is not followed 
		
		
Comparable and Comparator


		TreeSet,TreeMap
add
	alphabatical order 
	ascending order 
	
java.lang 
Comparable-->compareTo()-->NSO
java.util
Comparator-->compare()-->CSO






***************Product Management Application*******
1.Add Product 
2.Update Product 
3.Delete Product 
4.Get Product 
5.GetAll Product                 
6.GetAllProducts InBetween prices
7.Exit



	Database :

			laptop data 
			
			mobile 
			
			employee
			
			product
		
		
		RDB-->oracle,mysql,postgres,db2
		
		
		mysql-->Tables-->rows  &  columns
		
		
		Employee
		
			eid  ename eadd easl edesg
			1     x		y   200   trainer
		
		
		Querys
		
	DDL		create,alter,drop,rename,truncate...
	DML		insert,update,delete
	DRL
	DCL
	TCL
		
		
	Foreign Key:
	============
		employee			

empid   ename     esal    eadd    		deptno   dname    dloc 	
	1		x	   1000	   hyd			10		 admin	 banglore
	2		y	   2000	  chennai		20         hr		hyd
	3		z 	   3000   chennai		30        dev	  chennai
	4		a	   5000   banglore      20         hr		hyd
	5		b	   3000   mumbai		10		 admin	  banglore
	6		c	   8000	  delhi      	30        dev	  chennai
	7		d	   1000    hyd			30        dev	  chennai
	8		e	   3000    hyd			20         hr		hyd

			
			
			
			
			
			
			
			
			
	employee			foreign key

empid   ename     esal    eadd    		deptno   	
	1		x	   1000	   hyd			10		 
	2		y	   2000	  chennai		20        
	3		z 	   3000   chennai		30       
	4		a	   5000   banglore      20         
	5		b	   3000   mumbai		10		 
	6		c	   8000	  delhi      	30       
	7		d	   1000    hyd			30       
	8		e	   3000    hyd			20    	
			
	dept
deptno   dname    dloc 	
10		admin		banglore		
20		hr			hyd
30		dev			chennai


	Foreign key  reation ship
	
	https://www.knowprogram.com/oracle/emp-dept-tables/
	
	
	
		Database---query's
		
		
						DB<---CRUD	<----java
		
				sun micor system--->JDBC API
		
											JDBC API
								Database	<---	.java
								
		
		JdbcCrudEx.java
		
		
		
		5 steps		jar --->mysql jar 
							ojdbc .jar
							postgre.jar 
		
		
				//loading driver class database 
				
			   //create Db connection  username and pwd url 3306
			   
			   //create statement
			   
			   //execute querys
			   
			   //close the connection
		


