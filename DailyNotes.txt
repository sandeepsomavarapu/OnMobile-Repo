
		JAVA is one of the OOPL/OOPS


		OOPS
			1.inheritance
			2.polymorphisam
			3.encapsulation
			4.abstraction


	OOPL	JAVA,python,.net,c++......
		

			java 18    		1995   JDK
						jdk8 download
			1.8 
To check java version ....

java  -version


javac -version

				PlatformIndependent
				
				java  PlatformIndependent		oracle
				.net 	Platform dependent		microsoft 
				
				
				welcome to java  
				
				Welcome.java 			.CLASS
				class Welcome    USER UNDERSTANDABLE LANGUAGE   SOURCE -->BYTE CODE
				{
				public static void main(String args[])
				{
				
				System.out.println("welcome to java");
				}
				}					JVM --BINARY 0'S AND 1'S BYTE CODE 
				
				javac filename.java //compilation    COMPILER 
				
				java classname     EXECUTION  JVM
				
				
				
				53 keywords -2 unused keywords
				
				
				Garbage collection --> garbage collector 
				
				
					c,c++
				
				
				
variables :
==========
		
			local   inside method {}
					
			global	outside method with in the class --->instance and static
			



									JAVA
				JSE 				 JEE     		       			 JME 				
	COREJAVA,AWT,SWINGS,APPLETS		servlets,jsp,mvcejb,jsf...			android 		



1)DESKTOP APPS/STANDALONE APPS   jse   ANTIVIRUS,MEDIA PLAYERS,ECLIPSE,....

2)WEB APPLICATIONS		server urls  JEE

3)DISTRIBUTED APPLICATIONS   webservices 

4)MOBILE APPLICATIONS	android JME 		


		OOPS
			1.inheritance
			2.polymorphisam     performance 
			
			3.encapsulation
			4.abstraction       security 
	
				
				Object-->11 methods
				
				
				class A
				{
				//20 methods
				
				
				}
				
				
				
				class B extends A
				{
				//10  methods 
				
				B b =new B();
				b.30()
				}
				
multiple Inheritance:
======================
instance,static

abstract ,concrete 

		public abstract void m1();

Abstraction
			abstract class 
			
			interfaces 

class 				: its a collection of only concrete methods 
 
abstract class		:its a collection of abstract+concrete methods 

interface 			 :only abstract methods 


Multiple Inheritance :
======================

		MI not supported by java @ classes
		MI  supported by java @ interface


	interface A      interface B
	{			{
	
	void cal();   void cal();
	
	}			}


		class C implements A,B
		{
		p s sv main(String args[]){}
		C c =new C();
		c.cal();//ambiguity 
		//12 ,14
		}
			void cal(){
			
			
			}
	
	}	
		}

	polymorphisam,this,super,final,public,private,protected,default,constructor,encapsulation


method overloading:
===================
		method name is same signature is different 

								no of params
								order of params 
								type of params 
	
method overriding:
================= parent and child mandatory
		method name is same body/implementation is different 




	class Parent 
	{
	  properties()
	  {
	  sop("100 crores")
	  }
	  marraige()
	  {
	  sop("xyz")
	  }
	}

class Child extends Parent {
	@Override 
	  marraige()
	  {
	  sop("abc")
	  }
}


final 

		3 places 
		
		before variable,method,class




this 	used for represting current class properties(variable,method,obje,constructor)

super  used for represting parent class properties



public :anywhere (inside or outside package irrespective of parent child relations)
private :only inside the class
default :only inside the package 
protected isnide package anywhere outside the package only when ever it is child





